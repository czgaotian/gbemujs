import {
  Instruction,
  ADDRESS_MODE as AM,
  CONDITION_TYPE as CT,
  INSTRUCTION_TYPE as IN,
  REGISTER_TYPE as RT,
} from '../types';

const instruction = (
  type: IN,
  addressMode: AM = AM.IMPLIED,
  registerType1: RT = RT.NONE,
  registerType2: RT = RT.NONE,
  conditionType: CT = CT.NONE,
  param: number = 0
): Instruction => {
  return {
    type,
    addressMode,
    registerType1,
    registerType2,
    conditionType,
    param,
  };
};

export const instructionMap: Record<number, Instruction> = {
  0x00: instruction(IN.NOP, AM.IMPLIED),
  0x01: instruction(IN.LD, AM.R_D16, RT.BC),
  0x02: instruction(IN.LD, AM.MR_R, RT.BC, RT.A),
  0x03: instruction(IN.INC, AM.R, RT.BC),
  0x04: instruction(IN.INC, AM.R, RT.B),
  0x05: instruction(IN.DEC, AM.R, RT.B),
  0x06: instruction(IN.LD, AM.R_D8, RT.B),
  0x07: instruction(IN.RLCA),
  0x08: instruction(IN.LD, AM.A16_R, RT.NONE, RT.SP),
  0x09: instruction(IN.ADD, AM.R_R, RT.HL, RT.BC),
  0x0a: instruction(IN.LD, AM.R_MR, RT.A, RT.BC),
  0x0b: instruction(IN.DEC, AM.R, RT.BC),
  0x0c: instruction(IN.INC, AM.R, RT.C),
  0x0d: instruction(IN.DEC, AM.R, RT.C),
  0x0e: instruction(IN.LD, AM.R_D8, RT.C),
  0x0f: instruction(IN.RRCA),

  0x10: instruction(IN.STOP),
  0x11: instruction(IN.LD, AM.R_D16, RT.DE),
  0x12: instruction(IN.LD, AM.MR_R, RT.DE, RT.A),
  0x13: instruction(IN.INC, AM.R, RT.DE),
  0x14: instruction(IN.INC, AM.R, RT.D),
  0x15: instruction(IN.DEC, AM.R, RT.D),
  0x16: instruction(IN.LD, AM.R_D8, RT.D),
  0x17: instruction(IN.RLA),
  0x18: instruction(IN.JR, AM.D8),
  0x19: instruction(IN.ADD, AM.R_R, RT.HL, RT.DE),
  0x1a: instruction(IN.LD, AM.R_MR, RT.A, RT.DE),
  0x1b: instruction(IN.DEC, AM.R, RT.DE),
  0x1c: instruction(IN.INC, AM.R, RT.E),
  0x1d: instruction(IN.DEC, AM.R, RT.E),
  0x1e: instruction(IN.LD, AM.R_D8, RT.E),
  0x1f: instruction(IN.RRA),

  0x20: instruction(IN.JR, AM.D8, RT.NONE, RT.NONE, CT.NZ),
  0x21: instruction(IN.LD, AM.R_D16, RT.HL),
  0x22: instruction(IN.LD, AM.HLI_R, RT.HL, RT.A),
  0x23: instruction(IN.INC, AM.R, RT.HL),
  0x24: instruction(IN.INC, AM.R, RT.H),
  0x25: instruction(IN.DEC, AM.R, RT.H),
  0x26: instruction(IN.LD, AM.R_D8, RT.H),
  0x27: instruction(IN.DAA),
  0x28: instruction(IN.JR, AM.D8, RT.NONE, RT.NONE, CT.Z),
  0x29: instruction(IN.ADD, AM.R_R, RT.HL, RT.HL),
  0x2a: instruction(IN.LD, AM.R_HLI, RT.A, RT.HL),
  0x2b: instruction(IN.DEC, AM.R, RT.HL),
  0x2c: instruction(IN.INC, AM.R, RT.L),
  0x2d: instruction(IN.DEC, AM.R, RT.L),
  0x2e: instruction(IN.LD, AM.R_D8, RT.L),
  0x2f: instruction(IN.CPL),

  0x30: instruction(IN.JR, AM.D8, RT.NONE, RT.NONE, CT.NC),
  0x31: instruction(IN.LD, AM.R_D16, RT.SP),
  0x32: instruction(IN.LD, AM.HLD_R, RT.HL, RT.A),
  0x33: instruction(IN.INC, AM.R, RT.SP),
  0x34: instruction(IN.INC, AM.MR, RT.HL),
  0x35: instruction(IN.DEC, AM.MR, RT.HL),
  0x36: instruction(IN.LD, AM.MR_D8, RT.HL),
  0x37: instruction(IN.SCF),
  0x38: instruction(IN.JR, AM.D8, RT.NONE, RT.NONE, CT.C),
  0x39: instruction(IN.ADD, AM.R_R, RT.HL, RT.SP),
  0x3a: instruction(IN.LD, AM.R_HLD, RT.A, RT.HL),
  0x3b: instruction(IN.DEC, AM.R, RT.SP),
  0x3c: instruction(IN.INC, AM.R, RT.A),
  0x3d: instruction(IN.DEC, AM.R, RT.A),
  0x3e: instruction(IN.LD, AM.R_D8, RT.A),
  0x3f: instruction(IN.CCF),

  0x40: instruction(IN.LD, AM.R_R, RT.B, RT.B),
  0x41: instruction(IN.LD, AM.R_R, RT.B, RT.C),
  0x42: instruction(IN.LD, AM.R_R, RT.B, RT.D),
  0x43: instruction(IN.LD, AM.R_R, RT.B, RT.E),
  0x44: instruction(IN.LD, AM.R_R, RT.B, RT.H),
  0x45: instruction(IN.LD, AM.R_R, RT.B, RT.L),
  0x46: instruction(IN.LD, AM.R_MR, RT.B, RT.HL),
  0x47: instruction(IN.LD, AM.R_R, RT.B, RT.A),
  0x48: instruction(IN.LD, AM.R_R, RT.C, RT.B),
  0x49: instruction(IN.LD, AM.R_R, RT.C, RT.C),
  0x4a: instruction(IN.LD, AM.R_R, RT.C, RT.D),
  0x4b: instruction(IN.LD, AM.R_R, RT.C, RT.E),
  0x4c: instruction(IN.LD, AM.R_R, RT.C, RT.H),
  0x4d: instruction(IN.LD, AM.R_R, RT.C, RT.L),
  0x4e: instruction(IN.LD, AM.R_MR, RT.C, RT.HL),
  0x4f: instruction(IN.LD, AM.R_R, RT.C, RT.A),

  0x50: instruction(IN.LD, AM.R_R, RT.D, RT.B),
  0x51: instruction(IN.LD, AM.R_R, RT.D, RT.C),
  0x52: instruction(IN.LD, AM.R_R, RT.D, RT.D),
  0x53: instruction(IN.LD, AM.R_R, RT.D, RT.E),
  0x54: instruction(IN.LD, AM.R_R, RT.D, RT.H),
  0x55: instruction(IN.LD, AM.R_R, RT.D, RT.L),
  0x56: instruction(IN.LD, AM.R_MR, RT.D, RT.HL),
  0x57: instruction(IN.LD, AM.R_R, RT.D, RT.A),
  0x58: instruction(IN.LD, AM.R_R, RT.E, RT.B),
  0x59: instruction(IN.LD, AM.R_R, RT.E, RT.C),
  0x5a: instruction(IN.LD, AM.R_R, RT.E, RT.D),
  0x5b: instruction(IN.LD, AM.R_R, RT.E, RT.E),
  0x5c: instruction(IN.LD, AM.R_R, RT.E, RT.H),
  0x5d: instruction(IN.LD, AM.R_R, RT.E, RT.L),
  0x5e: instruction(IN.LD, AM.R_MR, RT.E, RT.HL),
  0x5f: instruction(IN.LD, AM.R_R, RT.E, RT.A),

  0x60: instruction(IN.LD, AM.R_R, RT.H, RT.B),
  0x61: instruction(IN.LD, AM.R_R, RT.H, RT.C),
  0x62: instruction(IN.LD, AM.R_R, RT.H, RT.D),
  0x63: instruction(IN.LD, AM.R_R, RT.H, RT.E),
  0x64: instruction(IN.LD, AM.R_R, RT.H, RT.H),
  0x65: instruction(IN.LD, AM.R_R, RT.H, RT.L),
  0x66: instruction(IN.LD, AM.R_MR, RT.H, RT.HL),
  0x67: instruction(IN.LD, AM.R_R, RT.H, RT.A),
  0x68: instruction(IN.LD, AM.R_R, RT.L, RT.B),
  0x69: instruction(IN.LD, AM.R_R, RT.L, RT.C),
  0x6a: instruction(IN.LD, AM.R_R, RT.L, RT.D),
  0x6b: instruction(IN.LD, AM.R_R, RT.L, RT.E),
  0x6c: instruction(IN.LD, AM.R_R, RT.L, RT.H),
  0x6d: instruction(IN.LD, AM.R_R, RT.L, RT.L),
  0x6e: instruction(IN.LD, AM.R_MR, RT.L, RT.HL),
  0x6f: instruction(IN.LD, AM.R_R, RT.L, RT.A),

  0x70: instruction(IN.LD, AM.MR_R, RT.HL, RT.B),
  0x71: instruction(IN.LD, AM.MR_R, RT.HL, RT.C),
  0x72: instruction(IN.LD, AM.MR_R, RT.HL, RT.D),
  0x73: instruction(IN.LD, AM.MR_R, RT.HL, RT.E),
  0x74: instruction(IN.LD, AM.MR_R, RT.HL, RT.H),
  0x75: instruction(IN.LD, AM.MR_R, RT.HL, RT.L),
  0x76: instruction(IN.HALT),
  0x77: instruction(IN.LD, AM.MR_R, RT.HL, RT.A),
  0x78: instruction(IN.LD, AM.R_R, RT.A, RT.B),
  0x79: instruction(IN.LD, AM.R_R, RT.A, RT.C),
  0x7a: instruction(IN.LD, AM.R_R, RT.A, RT.D),
  0x7b: instruction(IN.LD, AM.R_R, RT.A, RT.E),
  0x7c: instruction(IN.LD, AM.R_R, RT.A, RT.H),
  0x7d: instruction(IN.LD, AM.R_R, RT.A, RT.L),
  0x7e: instruction(IN.LD, AM.R_MR, RT.A, RT.HL),
  0x7f: instruction(IN.LD, AM.R_R, RT.A, RT.A),

  0x80: instruction(IN.ADD, AM.R_R, RT.A, RT.B),
  0x81: instruction(IN.ADD, AM.R_R, RT.A, RT.C),
  0x82: instruction(IN.ADD, AM.R_R, RT.A, RT.D),
  0x83: instruction(IN.ADD, AM.R_R, RT.A, RT.E),
  0x84: instruction(IN.ADD, AM.R_R, RT.A, RT.H),
  0x85: instruction(IN.ADD, AM.R_R, RT.A, RT.L),
  0x86: instruction(IN.ADD, AM.R_MR, RT.A, RT.HL),
  0x87: instruction(IN.ADD, AM.R_R, RT.A, RT.A),
  0x88: instruction(IN.ADC, AM.R_R, RT.A, RT.B),
  0x89: instruction(IN.ADC, AM.R_R, RT.A, RT.C),
  0x8a: instruction(IN.ADC, AM.R_R, RT.A, RT.D),
  0x8b: instruction(IN.ADC, AM.R_R, RT.A, RT.E),
  0x8c: instruction(IN.ADC, AM.R_R, RT.A, RT.H),
  0x8d: instruction(IN.ADC, AM.R_R, RT.A, RT.L),
  0x8e: instruction(IN.ADC, AM.R_MR, RT.A, RT.HL),
  0x8f: instruction(IN.ADC, AM.R_R, RT.A, RT.A),

  0x90: instruction(IN.SUB, AM.R_R, RT.A, RT.B),
  0x91: instruction(IN.SUB, AM.R_R, RT.A, RT.C),
  0x92: instruction(IN.SUB, AM.R_R, RT.A, RT.D),
  0x93: instruction(IN.SUB, AM.R_R, RT.A, RT.E),
  0x94: instruction(IN.SUB, AM.R_R, RT.A, RT.H),
  0x95: instruction(IN.SUB, AM.R_R, RT.A, RT.L),
  0x96: instruction(IN.SUB, AM.R_MR, RT.A, RT.HL),
  0x97: instruction(IN.SUB, AM.R_R, RT.A, RT.A),
  0x98: instruction(IN.SBC, AM.R_R, RT.A, RT.B),
  0x99: instruction(IN.SBC, AM.R_R, RT.A, RT.C),
  0x9a: instruction(IN.SBC, AM.R_R, RT.A, RT.D),
  0x9b: instruction(IN.SBC, AM.R_R, RT.A, RT.E),
  0x9c: instruction(IN.SBC, AM.R_R, RT.A, RT.H),
  0x9d: instruction(IN.SBC, AM.R_R, RT.A, RT.L),
  0x9e: instruction(IN.SBC, AM.R_MR, RT.A, RT.HL),
  0x9f: instruction(IN.SBC, AM.R_R, RT.A, RT.A),

  // 0xAX
  0xa0: instruction(IN.AND, AM.R_R, RT.A, RT.B),
  0xa1: instruction(IN.AND, AM.R_R, RT.A, RT.C),
  0xa2: instruction(IN.AND, AM.R_R, RT.A, RT.D),
  0xa3: instruction(IN.AND, AM.R_R, RT.A, RT.E),
  0xa4: instruction(IN.AND, AM.R_R, RT.A, RT.H),
  0xa5: instruction(IN.AND, AM.R_R, RT.A, RT.L),
  0xa6: instruction(IN.AND, AM.R_MR, RT.A, RT.HL),
  0xa7: instruction(IN.AND, AM.R_R, RT.A, RT.A),
  0xa8: instruction(IN.XOR, AM.R_R, RT.A, RT.B),
  0xa9: instruction(IN.XOR, AM.R_R, RT.A, RT.C),
  0xaa: instruction(IN.XOR, AM.R_R, RT.A, RT.D),
  0xab: instruction(IN.XOR, AM.R_R, RT.A, RT.E),
  0xac: instruction(IN.XOR, AM.R_R, RT.A, RT.H),
  0xad: instruction(IN.XOR, AM.R_R, RT.A, RT.L),
  0xae: instruction(IN.XOR, AM.R_MR, RT.A, RT.HL),
  0xaf: instruction(IN.XOR, AM.R_R, RT.A, RT.A),

  // 0xBX
  0xb0: instruction(IN.OR, AM.R_R, RT.A, RT.B),
  0xb1: instruction(IN.OR, AM.R_R, RT.A, RT.C),
  0xb2: instruction(IN.OR, AM.R_R, RT.A, RT.D),
  0xb3: instruction(IN.OR, AM.R_R, RT.A, RT.E),
  0xb4: instruction(IN.OR, AM.R_R, RT.A, RT.H),
  0xb5: instruction(IN.OR, AM.R_R, RT.A, RT.L),
  0xb6: instruction(IN.OR, AM.R_MR, RT.A, RT.HL),
  0xb7: instruction(IN.OR, AM.R_R, RT.A, RT.A),
  0xb8: instruction(IN.CP, AM.R_R, RT.A, RT.B),
  0xb9: instruction(IN.CP, AM.R_R, RT.A, RT.C),
  0xba: instruction(IN.CP, AM.R_R, RT.A, RT.D),
  0xbb: instruction(IN.CP, AM.R_R, RT.A, RT.E),
  0xbc: instruction(IN.CP, AM.R_R, RT.A, RT.H),
  0xbd: instruction(IN.CP, AM.R_R, RT.A, RT.L),
  0xbe: instruction(IN.CP, AM.R_MR, RT.A, RT.HL),
  0xbf: instruction(IN.CP, AM.R_R, RT.A, RT.A),

  0xc0: instruction(IN.RET, AM.IMPLIED, RT.NONE, RT.NONE, CT.NZ),
  0xc1: instruction(IN.POP, AM.R, RT.BC),
  0xc2: instruction(IN.JP, AM.D16, RT.NONE, RT.NONE, CT.NZ),
  0xc3: instruction(IN.JP, AM.D16),
  0xc4: instruction(IN.CALL, AM.D16, RT.NONE, RT.NONE, CT.NZ),
  0xc5: instruction(IN.PUSH, AM.R, RT.BC),
  0xc6: instruction(IN.ADD, AM.R_D8, RT.A),
  0xc7: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x00),
  0xc8: instruction(IN.RET, AM.IMPLIED, RT.NONE, RT.NONE, CT.Z),
  0xc9: instruction(IN.RET),
  0xca: instruction(IN.JP, AM.D16, RT.NONE, RT.NONE, CT.Z),
  0xcb: instruction(IN.CB, AM.D8),
  0xcc: instruction(IN.CALL, AM.D16, RT.NONE, RT.NONE, CT.Z),
  0xcd: instruction(IN.CALL, AM.D16),
  0xce: instruction(IN.ADC, AM.R_D8, RT.A),
  0xcf: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x08),

  0xd0: instruction(IN.RET, AM.IMPLIED, RT.NONE, RT.NONE, CT.NC),
  0xd1: instruction(IN.POP, AM.R, RT.DE),
  0xd2: instruction(IN.JP, AM.D16, RT.NONE, RT.NONE, CT.NC),
  0xd4: instruction(IN.CALL, AM.D16, RT.NONE, RT.NONE, CT.NC),
  0xd5: instruction(IN.PUSH, AM.R, RT.DE),
  0xd6: instruction(IN.SUB, AM.R_D8, RT.A),
  0xd7: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x10),
  0xd8: instruction(IN.RET, AM.IMPLIED, RT.NONE, RT.NONE, CT.C),
  0xd9: instruction(IN.RETI),
  0xda: instruction(IN.JP, AM.D16, RT.NONE, RT.NONE, CT.C),
  0xdc: instruction(IN.CALL, AM.D16, RT.NONE, RT.NONE, CT.C),
  0xde: instruction(IN.SBC, AM.R_D8, RT.A),
  0xdf: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x18),

  // 0xEX
  0xe0: instruction(IN.LDH, AM.A8_R, RT.NONE, RT.A),
  0xe1: instruction(IN.POP, AM.R, RT.HL),
  0xe2: instruction(IN.LD, AM.MR_R, RT.C, RT.A),
  0xe5: instruction(IN.PUSH, AM.R, RT.HL),
  0xe6: instruction(IN.AND, AM.R_D8, RT.A),
  0xe7: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x20),
  0xe8: instruction(IN.ADD, AM.R_D8, RT.SP),
  0xe9: instruction(IN.JP, AM.R, RT.HL),
  0xea: instruction(IN.LD, AM.A16_R, RT.NONE, RT.A),
  0xee: instruction(IN.XOR, AM.R_D8, RT.A),
  0xef: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x28),

  // 0xFX
  0xf0: instruction(IN.LDH, AM.R_A8, RT.A),
  0xf1: instruction(IN.POP, AM.R, RT.AF),
  0xf2: instruction(IN.LD, AM.R_MR, RT.A, RT.C),
  0xf3: instruction(IN.DI),
  0xf5: instruction(IN.PUSH, AM.R, RT.AF),
  0xf6: instruction(IN.OR, AM.R_D8, RT.A),
  0xf7: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x30),
  0xf8: instruction(IN.LD, AM.HL_SPR, RT.HL, RT.SP),
  0xf9: instruction(IN.LD, AM.R_R, RT.SP, RT.HL),
  0xfa: instruction(IN.LD, AM.R_A16, RT.A),
  0xfb: instruction(IN.EI),
  0xfe: instruction(IN.CP, AM.R_D8, RT.A),
  0xff: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x38),
};
