import { Instruction, ADDRESS_MODE as AM, CONDITION_TYPE as CT, INSTRUCTION_TYPE as IN, REGISTER_TYPE as RT } from "../types";

const instruction = (type: IN, addressMode: AM = AM.IMPLIED, registerType1: RT = RT.NONE, registerType2: RT = RT.NONE, conditionType: CT = CT.NONE, param: number = 0): Instruction => {
  return {
    type,
    addressMode,
    registerType1,
    registerType2,
    conditionType,
    param,
  };
};

export const instructionMap: Record<number, Instruction> = {
  0x00: instruction(IN.NOP, AM.IMPLIED),
  0x01: instruction(IN.LD, AM.R_D16, RT.BC),
  0x02: instruction(IN.LD, AM.MR_R, RT.BC, RT.A),
  0x03: instruction(IN.INC, AM.R, RT.BC),
  0x04: instruction(IN.INC, AM.R, RT.B),
  0x05: instruction(IN.DEC, AM.R, RT.B),
  0x06: instruction(IN.LD, AM.R_D8, RT.B),
  0x07: instruction(IN.RLCA),
  0x08: instruction(IN.LD, AM.A16_R, RT.NONE, RT.SP),
  0x09: instruction(IN.ADD, AM.R_R, RT.HL, RT.BC),
  0x0A: instruction(IN.LD, AM.R_MR, RT.A, RT.BC),
  0x0B: instruction(IN.DEC, AM.R, RT.BC),
  0x0C: instruction(IN.INC, AM.R, RT.C),
  0x0D: instruction(IN.DEC, AM.R, RT.C),
  0x0E: instruction(IN.LD, AM.R_D8, RT.C),
  0x0F: instruction(IN.RRCA),

  0x10: instruction(IN.STOP),
  0x11: instruction(IN.LD, AM.R_D16, RT.DE),
  0x12: instruction(IN.LD, AM.MR_R, RT.DE, RT.A),
  0x13: instruction(IN.INC, AM.R, RT.DE),
  0x14: instruction(IN.INC, AM.R, RT.D),
  0x15: instruction(IN.DEC, AM.R, RT.D),
  0x16: instruction(IN.LD, AM.R_D8, RT.D),
  0x17: instruction(IN.RLA),
  0x18: instruction(IN.JR, AM.D8),
  0x19: instruction(IN.ADD, AM.R_R, RT.HL, RT.DE),
  0x1A: instruction(IN.LD, AM.R_MR, RT.A, RT.DE),
  0x1B: instruction(IN.DEC, AM.R, RT.DE),
  0x1C: instruction(IN.INC, AM.R, RT.E),
  0x1D: instruction(IN.DEC, AM.R, RT.E),
  0x1E: instruction(IN.LD, AM.R_D8, RT.E),
  0x1F: instruction(IN.RRA),

  0x20: instruction(IN.JR, AM.D8, RT.NONE, RT.NONE, CT.NZ),
  0x21: instruction(IN.LD, AM.R_D16, RT.HL),
  0x22: instruction(IN.LD, AM.HLI_R, RT.HL, RT.A),
  0x23: instruction(IN.INC, AM.R, RT.HL),
  0x24: instruction(IN.INC, AM.R, RT.H),
  0x25: instruction(IN.DEC, AM.R, RT.H),
  0x26: instruction(IN.LD, AM.R_D8, RT.H),
  0x27: instruction(IN.DAA),
  0x28: instruction(IN.JR, AM.D8, RT.NONE, RT.NONE, CT.Z),
  0x29: instruction(IN.ADD, AM.R_R, RT.HL, RT.HL),
  0x2A: instruction(IN.LD, AM.R_HLI, RT.A, RT.HL),
  0x2B: instruction(IN.DEC, AM.R, RT.HL),
  0x2C: instruction(IN.INC, AM.R, RT.L),
  0x2D: instruction(IN.DEC, AM.R, RT.L),
  0x2E: instruction(IN.LD, AM.R_D8, RT.L),
  0x2F: instruction(IN.CPL),

  0x30: instruction(IN.JR, AM.D8, RT.NONE, RT.NONE, CT.NC),
  0x31: instruction(IN.LD, AM.R_D16, RT.SP),
  0x32: instruction(IN.LD, AM.HLD_R, RT.HL, RT.A),
  0x33: instruction(IN.INC, AM.R, RT.SP),
  0x34: instruction(IN.INC, AM.MR, RT.HL),
  0x35: instruction(IN.DEC, AM.MR, RT.HL),
  0x36: instruction(IN.LD, AM.MR_D8, RT.HL),
  0x37: instruction(IN.SCF),
  0x38: instruction(IN.JR, AM.D8, RT.NONE, RT.NONE, CT.C),
  0x39: instruction(IN.ADD, AM.R_R, RT.HL, RT.SP),
  0x3A: instruction(IN.LD, AM.R_HLD, RT.A, RT.HL),
  0x3B: instruction(IN.DEC, AM.R, RT.SP),
  0x3C: instruction(IN.INC, AM.R, RT.A),
  0x3D: instruction(IN.DEC, AM.R, RT.A),
  0x3E: instruction(IN.LD, AM.R_D8, RT.A),
  0x3F: instruction(IN.CCF),

  0x40: instruction(IN.LD, AM.R_R, RT.B, RT.B),
  0x41: instruction(IN.LD, AM.R_R, RT.B, RT.C),
  0x42: instruction(IN.LD, AM.R_R, RT.B, RT.D),
  0x43: instruction(IN.LD, AM.R_R, RT.B, RT.E),
  0x44: instruction(IN.LD, AM.R_R, RT.B, RT.H),
  0x45: instruction(IN.LD, AM.R_R, RT.B, RT.L),
  0x46: instruction(IN.LD, AM.R_MR, RT.B, RT.HL),
  0x47: instruction(IN.LD, AM.R_R, RT.B, RT.A),
  0x48: instruction(IN.LD, AM.R_R, RT.C, RT.B),
  0x49: instruction(IN.LD, AM.R_R, RT.C, RT.C),
  0x4A: instruction(IN.LD, AM.R_R, RT.C, RT.D),
  0x4B: instruction(IN.LD, AM.R_R, RT.C, RT.E),
  0x4C: instruction(IN.LD, AM.R_R, RT.C, RT.H),
  0x4D: instruction(IN.LD, AM.R_R, RT.C, RT.L),
  0x4E: instruction(IN.LD, AM.R_MR, RT.C, RT.HL),
  0x4F: instruction(IN.LD, AM.R_R, RT.C, RT.A),

  0x50: instruction(IN.LD, AM.R_R, RT.D, RT.B),
  0x51: instruction(IN.LD, AM.R_R, RT.D, RT.C),
  0x52: instruction(IN.LD, AM.R_R, RT.D, RT.D),
  0x53: instruction(IN.LD, AM.R_R, RT.D, RT.E),
  0x54: instruction(IN.LD, AM.R_R, RT.D, RT.H),
  0x55: instruction(IN.LD, AM.R_R, RT.D, RT.L),
  0x56: instruction(IN.LD, AM.R_MR, RT.D, RT.HL),
  0x57: instruction(IN.LD, AM.R_R, RT.D, RT.A),
  0x58: instruction(IN.LD, AM.R_R, RT.E, RT.B),
  0x59: instruction(IN.LD, AM.R_R, RT.E, RT.C),
  0x5A: instruction(IN.LD, AM.R_R, RT.E, RT.D),
  0x5B: instruction(IN.LD, AM.R_R, RT.E, RT.E),
  0x5C: instruction(IN.LD, AM.R_R, RT.E, RT.H),
  0x5D: instruction(IN.LD, AM.R_R, RT.E, RT.L),
  0x5E: instruction(IN.LD, AM.R_MR, RT.E, RT.HL),
  0x5F: instruction(IN.LD, AM.R_R, RT.E, RT.A),

  0x60: instruction(IN.LD, AM.R_R, RT.H, RT.B),
  0x61: instruction(IN.LD, AM.R_R, RT.H, RT.C),
  0x62: instruction(IN.LD, AM.R_R, RT.H, RT.D),
  0x63: instruction(IN.LD, AM.R_R, RT.H, RT.E),
  0x64: instruction(IN.LD, AM.R_R, RT.H, RT.H),
  0x65: instruction(IN.LD, AM.R_R, RT.H, RT.L),
  0x66: instruction(IN.LD, AM.R_MR, RT.H, RT.HL),
  0x67: instruction(IN.LD, AM.R_R, RT.H, RT.A),
  0x68: instruction(IN.LD, AM.R_R, RT.L, RT.B),
  0x69: instruction(IN.LD, AM.R_R, RT.L, RT.C),
  0x6A: instruction(IN.LD, AM.R_R, RT.L, RT.D),
  0x6B: instruction(IN.LD, AM.R_R, RT.L, RT.E),
  0x6C: instruction(IN.LD, AM.R_R, RT.L, RT.H),
  0x6D: instruction(IN.LD, AM.R_R, RT.L, RT.L),
  0x6E: instruction(IN.LD, AM.R_MR, RT.L, RT.HL),
  0x6F: instruction(IN.LD, AM.R_R, RT.L, RT.A),

  0x70: instruction(IN.LD, AM.MR_R, RT.HL, RT.B),
  0x71: instruction(IN.LD, AM.MR_R, RT.HL, RT.C),
  0x72: instruction(IN.LD, AM.MR_R, RT.HL, RT.D),
  0x73: instruction(IN.LD, AM.MR_R, RT.HL, RT.E),
  0x74: instruction(IN.LD, AM.MR_R, RT.HL, RT.H),
  0x75: instruction(IN.LD, AM.MR_R, RT.HL, RT.L),
  0x76: instruction(IN.HALT),
  0x77: instruction(IN.LD, AM.MR_R, RT.HL, RT.A),
  0x78: instruction(IN.LD, AM.R_R, RT.A, RT.B),
  0x79: instruction(IN.LD, AM.R_R, RT.A, RT.C),
  0x7A: instruction(IN.LD, AM.R_R, RT.A, RT.D),
  0x7B: instruction(IN.LD, AM.R_R, RT.A, RT.E),
  0x7C: instruction(IN.LD, AM.R_R, RT.A, RT.H),
  0x7D: instruction(IN.LD, AM.R_R, RT.A, RT.L),
  0x7E: instruction(IN.LD, AM.R_MR, RT.A, RT.HL),
  0x7F: instruction(IN.LD, AM.R_R, RT.A, RT.A),

  0x80: instruction(IN.ADD, AM.R_R, RT.A, RT.B),
  0x81: instruction(IN.ADD, AM.R_R, RT.A, RT.C),
  0x82: instruction(IN.ADD, AM.R_R, RT.A, RT.D),
  0x83: instruction(IN.ADD, AM.R_R, RT.A, RT.E),
  0x84: instruction(IN.ADD, AM.R_R, RT.A, RT.H),
  0x85: instruction(IN.ADD, AM.R_R, RT.A, RT.L),
  0x86: instruction(IN.ADD, AM.R_MR, RT.A, RT.HL),
  0x87: instruction(IN.ADD, AM.R_R, RT.A, RT.A),
  0x88: instruction(IN.ADC, AM.R_R, RT.A, RT.B),
  0x89: instruction(IN.ADC, AM.R_R, RT.A, RT.C),
  0x8A: instruction(IN.ADC, AM.R_R, RT.A, RT.D),
  0x8B: instruction(IN.ADC, AM.R_R, RT.A, RT.E),
  0x8C: instruction(IN.ADC, AM.R_R, RT.A, RT.H),
  0x8D: instruction(IN.ADC, AM.R_R, RT.A, RT.L),
  0x8E: instruction(IN.ADC, AM.R_MR, RT.A, RT.HL),
  0x8F: instruction(IN.ADC, AM.R_R, RT.A, RT.A),

  0x90: instruction(IN.SUB, AM.R_R, RT.A, RT.B),
  0x91: instruction(IN.SUB, AM.R_R, RT.A, RT.C),
  0x92: instruction(IN.SUB, AM.R_R, RT.A, RT.D),
  0x93: instruction(IN.SUB, AM.R_R, RT.A, RT.E),
  0x94: instruction(IN.SUB, AM.R_R, RT.A, RT.H),
  0x95: instruction(IN.SUB, AM.R_R, RT.A, RT.L),
  0x96: instruction(IN.SUB, AM.R_MR, RT.A, RT.HL),
  0x97: instruction(IN.SUB, AM.R_R, RT.A, RT.A),
  0x98: instruction(IN.SBC, AM.R_R, RT.A, RT.B),
  0x99: instruction(IN.SBC, AM.R_R, RT.A, RT.C),
  0x9A: instruction(IN.SBC, AM.R_R, RT.A, RT.D),
  0x9B: instruction(IN.SBC, AM.R_R, RT.A, RT.E),
  0x9C: instruction(IN.SBC, AM.R_R, RT.A, RT.H),
  0x9D: instruction(IN.SBC, AM.R_R, RT.A, RT.L),
  0x9E: instruction(IN.SBC, AM.R_MR, RT.A, RT.HL),
  0x9F: instruction(IN.SBC, AM.R_R, RT.A, RT.A),

    // 0xAX
  0xA0: instruction(IN.AND, AM.R_R, RT.A, RT.B),
  0xA1: instruction(IN.AND, AM.R_R, RT.A, RT.C),
  0xA2: instruction(IN.AND, AM.R_R, RT.A, RT.D),
  0xA3: instruction(IN.AND, AM.R_R, RT.A, RT.E),
  0xA4: instruction(IN.AND, AM.R_R, RT.A, RT.H),
  0xA5: instruction(IN.AND, AM.R_R, RT.A, RT.L),
  0xA6: instruction(IN.AND, AM.R_MR, RT.A, RT.HL),
  0xA7: instruction(IN.AND, AM.R_R, RT.A, RT.A),
  0xA8: instruction(IN.XOR, AM.R_R, RT.A, RT.B),
  0xA9: instruction(IN.XOR, AM.R_R, RT.A, RT.C),
  0xAA: instruction(IN.XOR, AM.R_R, RT.A, RT.D),
  0xAB: instruction(IN.XOR, AM.R_R, RT.A, RT.E),
  0xAC: instruction(IN.XOR, AM.R_R, RT.A, RT.H),
  0xAD: instruction(IN.XOR, AM.R_R, RT.A, RT.L),
  0xAE: instruction(IN.XOR, AM.R_MR, RT.A, RT.HL),
  0xAF: instruction(IN.XOR, AM.R_R, RT.A, RT.A),

    // 0xBX
  0xB0: instruction(IN.OR, AM.R_R, RT.A, RT.B),
  0xB1: instruction(IN.OR, AM.R_R, RT.A, RT.C),
  0xB2: instruction(IN.OR, AM.R_R, RT.A, RT.D),
  0xB3: instruction(IN.OR, AM.R_R, RT.A, RT.E),
  0xB4: instruction(IN.OR, AM.R_R, RT.A, RT.H),
  0xB5: instruction(IN.OR, AM.R_R, RT.A, RT.L),
  0xB6: instruction(IN.OR, AM.R_MR, RT.A, RT.HL),
  0xB7: instruction(IN.OR, AM.R_R, RT.A, RT.A),
  0xB8: instruction(IN.CP, AM.R_R, RT.A, RT.B),
  0xB9: instruction(IN.CP, AM.R_R, RT.A, RT.C),
  0xBA: instruction(IN.CP, AM.R_R, RT.A, RT.D),
  0xBB: instruction(IN.CP, AM.R_R, RT.A, RT.E),
  0xBC: instruction(IN.CP, AM.R_R, RT.A, RT.H),
  0xBD: instruction(IN.CP, AM.R_R, RT.A, RT.L),
  0xBE: instruction(IN.CP, AM.R_MR, RT.A, RT.HL),
  0xBF: instruction(IN.CP, AM.R_R, RT.A, RT.A),

  0xC0: instruction(IN.RET, AM.IMPLIED, RT.NONE, RT.NONE, CT.NZ),
  0xC1: instruction(IN.POP, AM.R, RT.BC),
  0xC2: instruction(IN.JP, AM.D16, RT.NONE, RT.NONE, CT.NZ),
  0xC3: instruction(IN.JP, AM.D16),
  0xC4: instruction(IN.CALL, AM.D16, RT.NONE, RT.NONE, CT.NZ),
  0xC5: instruction(IN.PUSH, AM.R, RT.BC),
  0xC6: instruction(IN.ADD, AM.R_D8, RT.A),
  0xC7: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x00),
  0xC8: instruction(IN.RET, AM.IMPLIED, RT.NONE, RT.NONE, CT.Z),
  0xC9: instruction(IN.RET),
  0xCA: instruction(IN.JP, AM.D16, RT.NONE, RT.NONE, CT.Z),
  0xCB: instruction(IN.CB, AM.D8),
  0xCC: instruction(IN.CALL, AM.D16, RT.NONE, RT.NONE, CT.Z),
  0xCD: instruction(IN.CALL, AM.D16),
  0xCE: instruction(IN.ADC, AM.R_D8, RT.A),
  0xCF: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x08),

  0xD0: instruction(IN.RET, AM.IMPLIED, RT.NONE, RT.NONE, CT.NC),
  0xD1: instruction(IN.POP, AM.R, RT.DE),
  0xD2: instruction(IN.JP, AM.D16, RT.NONE, RT.NONE, CT.NC),
  0xD4: instruction(IN.CALL, AM.D16, RT.NONE, RT.NONE, CT.NC),
  0xD5: instruction(IN.PUSH, AM.R, RT.DE),
  0xD6: instruction(IN.SUB, AM.R_D8, RT.A),
  0xD7: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x10),
  0xD8: instruction(IN.RET, AM.IMPLIED, RT.NONE, RT.NONE, CT.C),
  0xD9: instruction(IN.RETI),
  0xDA: instruction(IN.JP, AM.D16, RT.NONE, RT.NONE, CT.C),
  0xDC: instruction(IN.CALL, AM.D16, RT.NONE, RT.NONE, CT.C),
  0xDE: instruction(IN.SBC, AM.R_D8, RT.A),
  0xDF: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x18),

    // 0xEX
  0xE0: instruction(IN.LDH, AM.A8_R, RT.NONE, RT.A),
  0xE1: instruction(IN.POP, AM.R, RT.HL),
  0xE2: instruction(IN.LD, AM.MR_R, RT.C, RT.A),
  0xE5: instruction(IN.PUSH, AM.R, RT.HL),
  0xE6: instruction(IN.AND, AM.R_D8, RT.A),
  0xE7: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x20),
  0xE8: instruction(IN.ADD, AM.R_D8, RT.SP),
  0xE9: instruction(IN.JP, AM.R, RT.HL),
  0xEA: instruction(IN.LD, AM.A16_R, RT.NONE, RT.A),
  0xEE: instruction(IN.XOR, AM.R_D8, RT.A),
  0xEF: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x28),

    // 0xFX
  0xF0: instruction(IN.LDH, AM.R_A8, RT.A),
  0xF1: instruction(IN.POP, AM.R, RT.AF),
  0xF2: instruction(IN.LD, AM.R_MR, RT.A, RT.C),
  0xF3: instruction(IN.DI),
  0xF5: instruction(IN.PUSH, AM.R, RT.AF),
  0xF6: instruction(IN.OR, AM.R_D8, RT.A),
  0xF7: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x30),
  0xF8: instruction(IN.LD, AM.HL_SPR, RT.HL, RT.SP),
  0xF9: instruction(IN.LD, AM.R_R, RT.SP, RT.HL),
  0xFA: instruction(IN.LD, AM.R_A16, RT.A),
  0xFB: instruction(IN.EI),
  0xFE: instruction(IN.CP, AM.R_D8, RT.A),
  0xFF: instruction(IN.RST, AM.IMPLIED, RT.NONE, RT.NONE, CT.NONE, 0x38),
};

